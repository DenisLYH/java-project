/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Customer;

import com.google.gson.reflect.TypeToken;
import java.util.ArrayList;
import java.util.List;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import java.io.*;
import java.util.*;
import javax.swing.*;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import javax.swing.table.DefaultTableModel;
import com.google.gson.reflect.TypeToken;
import com.mycompany.testing.Address;
import com.mycompany.testing.Menu;
import com.mycompany.testing.Order;
import com.mycompany.testing.OrderItem;
import com.mycompany.testing.User;

/**
 *
 * @author jrpha
 */
public class OrderfromMenu extends javax.swing.JFrame {
public String UserID;
    private List<Map<String, Object>> items = new ArrayList<>();

    /**
     * Creates new form OrderfromMenu
     */
    public OrderfromMenu(String UserID) {
        this.UserID=UserID;
        initComponents();
        loadfood(jTable1);
    }
     public static void loadfood(JTable jTable1){
        String menuFilePath = "menus.txt";
        Gson gson = new Gson();
        Map<String, List<Menu>> menuMap = new LinkedHashMap<>();

    try (BufferedReader br = new BufferedReader(new FileReader(menuFilePath))) {
        String line;
        while ((line = br.readLine()) != null) {
            Menu menu = gson.fromJson(line, Menu.class);

            // Group by menuid
            menuMap.computeIfAbsent(menu.itemID, k -> new ArrayList<>()).add(menu);
        }
    } catch (Exception e) {
        e.printStackTrace();
    }

    // Populate JTable
    DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
    model.setRowCount(0); // Clear previous data

    for (String menuid : menuMap.keySet()) {
        List<Menu> menuList = menuMap.get(menuid);
        
        // First row with menuid
        model.addRow(new Object[]{menuid, menuList.get(0).itemName, menuList.get(0).price});

        // Subsequent rows without menuid (just empty string for alignment)
        for (int i = 1; i < menuList.size(); i++) {
            model.addRow(new Object[]{"", menuList.get(i).itemName, menuList.get(i).price});
        }
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        proceed = new javax.swing.JButton();
        jComboBox3 = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel1.setText("Order");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Vendor", "Food & Beverage", "Price", "Quantity"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        proceed.setText("Proceed");
        proceed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                proceedActionPerformed(evt);
            }
        });

        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Dine-In", "Takeaway", "Delivery" }));

        jButton1.setText("<");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 55, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(proceed)
                            .addGap(19, 19, 19))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(51, 51, 51)))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 98, Short.MAX_VALUE)
                .addComponent(proceed)
                .addGap(20, 20, 20))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void proceedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_proceedActionPerformed
// Get selected order type from combo box
    String orderType = (String) jComboBox3.getSelectedItem();

    // Create a list to store selected items
    List<OrderItem> selectedItems = new ArrayList<>();

    // Iterate through the table rows to extract selected items and quantities
    for (int i = 0; i < jTable1.getRowCount(); i++) {
        // Get quantity from the table
        Object quantityObj = jTable1.getValueAt(i, 3);
        if (quantityObj != null && !quantityObj.toString().trim().isEmpty()) {
            try {
                int quantity = Integer.parseInt(quantityObj.toString());
                if (quantity > 0) { // Only add items with quantity > 0
                    // Get vendor, food, and price from the table
                    String vendorID = (String) jTable1.getValueAt(i, 0);
                    String foodName = (String) jTable1.getValueAt(i, 1);
                    double price = (double) jTable1.getValueAt(i, 2);

                    // Create an OrderItem object
                    OrderItem item = new OrderItem("M0001", foodName, quantity, price); // Replace "M0001" with actual menuID logic
                    selectedItems.add(item);
                }
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(null, "Invalid quantity entered for row " + (i + 1));
                return;
            }
        }
    }

    // Check if at least one item is selected
    if (selectedItems.isEmpty()) {
        JOptionPane.showMessageDialog(null, "Please enter quantities for at least one item.");
        return;
    }

    // Calculate total price
    double deliveryFee = orderType.equals("Delivery") ? 4.0 : 0.0;
    double totalPrice = selectedItems.stream().mapToDouble(item -> item.price * item.quantity).sum() + deliveryFee;

    // Fetch delivery address if order type is Delivery
    Address deliveryAddress = null;
    if (orderType.equals("Delivery")) {
        deliveryAddress = getUserAddress();
        if (deliveryAddress == null) {
            JOptionPane.showMessageDialog(null, "Failed to fetch delivery address.");
            return;
        }
    }
    LocalDateTime orderDateTime = LocalDateTime.parse(
    LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")),
    DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")
);
    // Generate order ID (replace with actual logic)
    String orderID = generateOrderID();
     String vendorID = (String) jTable1.getValueAt(0, 0);
    // Create Order object
    Order newOrder = new Order(
        orderID, // Order ID
        UserID, // Customer ID
        vendorID, // Vendor ID (assume all items are from the same vendor)
        new ArrayList<>(selectedItems), // List of OrderItem objects
        orderType, // Order type
        deliveryFee, // Delivery fee
        totalPrice, // Total price
        "Pending", // Order status
        deliveryAddress, // Delivery address (null for Dine-in/Takeaway)
        "D0001", 
        orderDateTime // Order date
    );

    // Append the order to orders.txt
    String orderFilePath = "orders.txt";
    Gson gson = new Gson();
    try (FileWriter fw = new FileWriter(orderFilePath, true);
         BufferedWriter bw = new BufferedWriter(fw);
         PrintWriter out = new PrintWriter(bw)) {
        out.println(gson.toJson(newOrder)); // Append as a new JSON object on a new line
        System.out.println("Order added,kindly wait for vendor to accept");
    } catch (IOException e) {
        System.out.println("Error writing to file: " + e.getMessage());
    }

    JOptionPane.showMessageDialog(null, "Order added,kindly wait for vendor to accept");
}
public String generateOrderID() {
    String orderFilePath = "orders.txt";
    String lastOrderID = "O0000"; // Default value if no orders exist

    try (BufferedReader reader = new BufferedReader(new FileReader(orderFilePath))) {
        String line;
        while ((line = reader.readLine()) != null) {
            // Parse the JSON line into an Order object
            Gson gson = new Gson();
            Order order = gson.fromJson(line, Order.class);
            lastOrderID = order.orderID; // Update lastOrderID with the latest order ID
        }
    } catch (IOException e) {
        e.printStackTrace();
    }

    // Extract the numeric part of the last order ID
    int lastNumber = Integer.parseInt(lastOrderID.substring(1));
    // Increment and format as O0001, O0002, etc.
    return String.format("O%04d", lastNumber + 1);
}
// Read orders from file (JSON format)
public List<Order> readOrdersFromFile(String filePath) {
    Gson gson = new Gson();
    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {
        return gson.fromJson(reader, new TypeToken<List<Order>>() {}.getType());
    } catch (IOException e) {
        return new ArrayList<>();
    }
}

// Write orders to file (JSON format)
public void writeOrdersToFile(String filePath, List<Order> orders) {
    Gson gson = new Gson();
    try (BufferedWriter writer = new BufferedWriter(new FileWriter(filePath))) {
        writer.write(gson.toJson(orders));
    } catch (IOException e) {
        JOptionPane.showMessageDialog(null, "Error saving order!", "Error", JOptionPane.ERROR_MESSAGE);
    }
}

// Fetch user address from users.txt
public Address getUserAddress() {
    String usersFilePath = "users.txt";
    Gson gson = new Gson();
    try (BufferedReader reader = new BufferedReader(new FileReader(usersFilePath))) {
        String line;
        while ((line = reader.readLine()) != null) {
            // Parse the JSON line into a User object
            User user = gson.fromJson(line, User.class);

            // Check if the userID matches
            if (user.getUserID().equals(UserID)) {
                return user.getAddress(); // Return the address of the matching user
            }
        }
    } catch (IOException e) {
        e.printStackTrace();
    
    }
    return null;






    }//GEN-LAST:event_proceedActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       this.dispose(); // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed
/*
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(OrderfromMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(OrderfromMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(OrderfromMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OrderfromMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                String testUserID = "C001"; // Temporary test UserID
                new OrderfromMenu(testUserID).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jComboBox3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton proceed;
    // End of variables declaration//GEN-END:variables
}
