/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Vendor;

import com.google.gson.reflect.TypeToken;
import com.mycompany.testing.FileHandler;
import com.mycompany.testing.Order;
import com.mycompany.testing.OrderItem;
import java.awt.Color;
import java.text.DecimalFormat;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Denis
 */
public class OrderHistoryV extends javax.swing.JFrame {
    private String VendorID;
    private List<Order> orderList;
    ArrayList<String> IDList;
    /**
     * Creates new form OrderHistoryV
     */
    public OrderHistoryV(String UserID) {
        initComponents();
        VendorID = UserID;
        getContentPane().setBackground(Color.LIGHT_GRAY);
        OrderHTB.setBackground(Color.LIGHT_GRAY);   // Background color
        OrderHTB.setForeground(Color.BLACK);        // Text color
        ComboBox.setBackground(Color.DARK_GRAY);   // Background color
        ComboBox.setForeground(Color.WHITE);        // Text color
        showTB(VendorID);
    }
    private void showTB(String ID){
        DefaultTableModel model = (DefaultTableModel)OrderHTB.getModel();
        model.setRowCount(0);
        String orderFilePath = "orders.txt";
        java.lang.reflect.Type orderType = new TypeToken<Order>(){}.getType();
        FileHandler<Order> orderFile = new FileHandler<>();
        orderList = orderFile.readTxt(orderFilePath, orderType);
        IDList = new ArrayList<>();
        ArrayList<String> customerID = new ArrayList<>();
        ArrayList<String> orderStatus = new ArrayList<>();
        ArrayList<String> orderTypeList = new ArrayList<>();
        ArrayList<String> oiNameList = new ArrayList<>();
        ArrayList<Integer> oiQuantityList = new ArrayList<>();
        ArrayList<String> oiTotalPriceTypeList = new ArrayList<>();
        ArrayList<String> oiOrderDate = new ArrayList<>();
        DecimalFormat df = new DecimalFormat("0.00");
        for(Order item:orderList){
            if (!IDList.contains(item.orderID)&& ID.equals(item.vendorID) ){
                for (OrderItem oi:item.items){
                    if ("Completed".equalsIgnoreCase(item.orderStatus)){
                        IDList.add(item.orderID);
                        customerID.add(item.customerID);
                        oiNameList.add(oi.itemName);
                        oiQuantityList.add(oi.quantity);
                        oiTotalPriceTypeList.add(df.format(oi.price * oi.quantity));
                        orderStatus.add(item.orderStatus);
                        orderTypeList.add(item.orderType);
                        oiOrderDate.add(item.GetDate());
                    }
                }
                
            }
        }
        ArrayList<Object[]> tbcontent = new ArrayList<>();
        for (int i = 0; i < IDList.size(); i++) {
            tbcontent.add(new Object[]{IDList.get(i),customerID.get(i),oiNameList.get(i),oiQuantityList.get(i),oiTotalPriceTypeList.get(i),orderStatus.get(i),orderTypeList.get(i),oiOrderDate.get(i)});
            //tbcontent.add(new Object[]{IDList.get(i),itemList.get(i),quantity.get(i),priceList.get(i),amountList.get(i)});
        }
        System.out.println(tbcontent);
        for (Object[] line:tbcontent){
            model.addRow(line);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        OrderHTB = new javax.swing.JTable();
        ComboBox = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        OrderHTB.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "OrderID", "CustomerID", "Item Name", "Quantity", "TotalPrice", "Status", "Order Type", "Date"
            }
        ));
        jScrollPane1.setViewportView(OrderHTB);

        ComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Today", "This month", "This year" }));
        ComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 600, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(252, 252, 252))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(67, 67, 67)
                .addComponent(ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 92, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        VendorDashboard vd = new VendorDashboard(VendorID);
        vd.show();         // TODO add your handling code here:
    }//GEN-LAST:event_formWindowClosed

    private void ComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboBoxActionPerformed
        String selectedPeriod = (String) ComboBox.getSelectedItem();  
    LocalDateTime now = LocalDateTime.now();  
    LocalDate startDate = null;  

    // Determine the start date based on the selection
    switch (selectedPeriod) {
        case "Today":
            startDate = now.toLocalDate();  // Today
            break;
        case "This month":
            startDate = now.toLocalDate().withDayOfMonth(1);  // First day of the current month
            break;
        case "This year":
            startDate = now.toLocalDate().withDayOfYear(1);
            break;
        default:
            return; // Exit if invalid selection
    }

    // Date formatter (ensure it matches orderDate format)
    DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");

    // Clear the table before adding new filtered results
    DefaultTableModel model = (DefaultTableModel) OrderHTB.getModel();
    model.setRowCount(0);
    
    DecimalFormat df = new DecimalFormat("0.00");

    // Filter and add only completed orders within the selected period
    for (Order item : orderList) {
        try {
            // Ensure the order date is not empty/null before parsing
            if (item.GetDate() == null || item.GetDate().isEmpty()) continue;

            LocalDateTime orderDateTime = LocalDateTime.parse(item.GetDate(), formatter);
            LocalDate orderDate = orderDateTime.toLocalDate(); // Extract date portion
            
            if (!orderDate.isBefore(startDate) && "Completed".equalsIgnoreCase(item.orderStatus)) {
                for (OrderItem oi : item.items) {
                    model.addRow(new Object[]{
                        item.orderID, item.customerID, oi.itemName, oi.quantity,
                        df.format(oi.price * oi.quantity), item.orderStatus, item.orderType, item.GetDate()
                    });
                }
            }
        } catch (Exception e) {
            System.out.println("Error parsing date for Order ID: " + item.orderID + " - " + e.getMessage());
        }
    }
        // TODO add your handling code here:
    }//GEN-LAST:event_ComboBoxActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(OrderHistoryV.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(OrderHistoryV.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(OrderHistoryV.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OrderHistoryV.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new OrderHistoryV().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> ComboBox;
    private javax.swing.JTable OrderHTB;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}